In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR24 (SHUFFLING_EXTEND):
if a source test case is run with the inputs [username, password, isAdmin]
and a follow-up test case is constructed by adding the following parameters [sort:+price]
and a follow-up test case is constructed by changing the value of the following parameters [sort:-price]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR17 (DISJUNCTIVE_CONTRACT):
if a source test case is run with the inputs [username, password, isAdmin, includeTripsWithUnsetAirbnbPrice]
and a follow-up test case is constructed by removing the following parameters [includeTripsWithUnsetAirbnbPrice]
then the follow-up output(s) should be a (non-strict) subset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR11 (SHUFFLING_EXTEND):
if a source test case is run with the inputs [username, password, maxPriceAirbnb, includeTripsWithUnsetAirbnbPrice]
and a follow-up test case is constructed by adding the following parameters [sort:+price]
and a follow-up test case is constructed by changing the value of the following parameters [sort:-price]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR19 (SHUFFLING_EXTEND):
if a source test case is run with the inputs [username, password, isAdmin, maxPriceAirbnb, includeTripsWithUnsetAirbnbPrice, sort:"+price"]
and a follow-up test case is constructed by changing the value of the following parameters [sort:+price]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR10 (CONJUNCTIVE_CONTRACT):
if a source test case is run with the inputs [username, password, maxPriceAirbnb, includeTripsWithUnsetAirbnbPrice]
and a follow-up test case is constructed by removing the following parameters [maxPriceAirbnb]
then the follow-up output(s) should be a (non-strict) superset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR4 (EQUIVALENCE_EXTEND):
if a source test case is run with the inputs [username, password, includeTripsWithUnsetAirbnbPrice, sort]
and a follow-up test case is constructed by adding the following parameters [isAdmin:false]
then the source and the follow-up output(s) should have the same items in the same order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR13 (CONJUNCTIVE_CONTRACT):
if a source test case is run with the inputs [username, password, isAdmin, maxPriceAirbnb, includeTripsWithUnsetAirbnbPrice, sort]
and a follow-up test case is constructed by removing the following parameters [maxPriceAirbnb]
then the follow-up output(s) should be a (non-strict) superset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR9 (SHUFFLING_EXTEND):
if a source test case is run with the inputs [username, password, isAdmin, maxPriceAirbnb, includeTripsWithUnsetAirbnbPrice]
and a follow-up test case is constructed by adding the following parameters [sort:+price]
and a follow-up test case is constructed by changing the value of the following parameters [sort:-price]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR20 (DISJUNCTIVE_EXTEND):
if a source test case is run with the inputs [username, password, isAdmin, sort]
and a follow-up test case is constructed by adding the following parameters [includeTripsWithUnsetAirbnbPrice]
then the follow-up output(s) should be a (non-strict) superset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR18 (SHUFFLING_EXTEND):
if a source test case is run with the inputs [username, password, isAdmin, includeTripsWithUnsetAirbnbPrice]
and a follow-up test case is constructed by adding the following parameters [sort:+price]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR0 (CONJUNCTIVE_EXTEND):
if a source test case is run with the inputs [username, password, includeTripsWithUnsetAirbnbPrice, sort]
and a follow-up test case is constructed by adding the following parameters [maxPriceAirbnb]
then the follow-up output(s) should be a (non-strict) subset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR23 (DISJUNCTIVE_EXTEND):
if a source test case is run with the inputs [username, password, isAdmin]
and a follow-up test case is constructed by adding the following parameters [includeTripsWithUnsetAirbnbPrice]
then the follow-up output(s) should be a (non-strict) superset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR15 (SHUFFLING_EXTEND):
if a source test case is run with the inputs [username, password, isAdmin, maxPriceAirbnb, includeTripsWithUnsetAirbnbPrice, sort:"-price"]
and a follow-up test case is constructed by changing the value of the following parameters [sort:+price]
and a follow-up test case is constructed by changing the value of the following parameters [sort:-price]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR5 (DISJUNCTIVE_EXTEND):
if a source test case is run with the inputs [username, password]
and a follow-up test case is constructed by adding the following parameters [includeTripsWithUnsetAirbnbPrice]
then the follow-up output(s) should be a (non-strict) superset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR8 (CONJUNCTIVE_CONTRACT):
if a source test case is run with the inputs [username, password, isAdmin, maxPriceAirbnb, includeTripsWithUnsetAirbnbPrice]
and a follow-up test case is constructed by removing the following parameters [maxPriceAirbnb]
then the follow-up output(s) should be a (non-strict) superset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR3 (SHUFFLING_EXTEND):
if a source test case is run with the inputs [username, password, includeTripsWithUnsetAirbnbPrice, sort:"-price"]
and a follow-up test case is constructed by changing the value of the following parameters [sort:+price]
and a follow-up test case is constructed by changing the value of the following parameters [sort:-price]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR6 (SHUFFLING_EXTEND):
if a source test case is run with the inputs [username, password]
and a follow-up test case is constructed by adding the following parameters [sort:+price]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR21 (SHUFFLING_CONTRACT):
if a source test case is run with the inputs [username, password, isAdmin, sort]
and a follow-up test case is constructed by removing the following parameters [sort]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR16 (CONJUNCTIVE_EXTEND):
if a source test case is run with the inputs [username, password, isAdmin, includeTripsWithUnsetAirbnbPrice]
and a follow-up test case is constructed by adding the following parameters [maxPriceAirbnb]
then the follow-up output(s) should be a (non-strict) subset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR2 (SHUFFLING_CONTRACT):
if a source test case is run with the inputs [username, password, includeTripsWithUnsetAirbnbPrice, sort]
and a follow-up test case is constructed by removing the following parameters [sort]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR1 (DISJUNCTIVE_CONTRACT):
if a source test case is run with the inputs [username, password, includeTripsWithUnsetAirbnbPrice, sort]
and a follow-up test case is constructed by removing the following parameters [includeTripsWithUnsetAirbnbPrice]
then the follow-up output(s) should be a (non-strict) subset of the source test output.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR14 (SHUFFLING_CONTRACT):
if a source test case is run with the inputs [username, password, isAdmin, maxPriceAirbnb, includeTripsWithUnsetAirbnbPrice, sort]
and a follow-up test case is constructed by removing the following parameters [sort]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR22 (SHUFFLING_EXTEND):
if a source test case is run with the inputs [username, password, isAdmin, sort:"+price"]
and a follow-up test case is constructed by changing the value of the following parameters [sort:+price]
and a follow-up test case is constructed by changing the value of the following parameters [sort:-price]
then the source and the follow-up output(s) should have the same items, regardless of their order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR12 (EQUIVALENCE_EXTEND):
if a source test case is run with the inputs [username, password, maxPriceAirbnb, includeTripsWithUnsetAirbnbPrice]
and a follow-up test case is constructed by adding the following parameters [isAdmin:false]
then the source and the follow-up output(s) should have the same items in the same order.

In the domain of TravelAPI (GetUserTrips)
the following metamorphic relation should hold
MR7 (EQUIVALENCE_EXTEND):
if a source test case is run with the inputs [username, password]
and a follow-up test case is constructed by adding the following parameters [isAdmin:false]
then the source and the follow-up output(s) should have the same items in the same order.

